// Работа с кортежем.
// Кортежи индексируются с единицы.

[i] - Получить i-тый элемент кортежа.
[-i] - Получить i-тый с конца элемент кортежа.
id - Возвращает входной кортеж.
([1] * ... * [n]).tupleLen - Возвращает длину кортежа n.

// Логические функции.
// undefined трактуется как false,
// () - пустой кортеж трактуется как true.

([1]).not
([1] * [2]).and // Вычисляются и [1] и [2]. 
// Если критично, использовать конструкцию ([1] -> [2]) ->
([1] * [2]).or // Вычисляются и [1] и [2]. 
// Если критично, использовать конструкцию ([1].not -> [2], true) ->
([1] * [2]).xor
([1] * [2]).equal
([1] * [2]).nequal
([1] * [2]).greater
([1] * [2]).less
([1] * [2]).gequal
([1] * [2]).lequal

// Арифметические функции.
([1] * [2]).add
([1] * [2]).sub
([1] * [2]).mul
([1] * [2]).div
([1] * [2]).mod
([1]).abs
([1]).sqrt
([1]).exp
([1]).ln
([1]).round - Математическое округление.
([1]).sin
([1]).cos
([1]).tan
([1]).asin
([1]).atan
Pi - Возвращает число Пи
E - Возвращает основание натурального логарифма.
rand -  Возвращает случайное вещественное число в диапазоне от 0 до 1.

// Преобразования типов.

([1]).toString
([1]).toInt
([1]).toReal

// Функции работы со строками.

([1] * ... * [n]).cat - Возвращает объединение строк [1]-[n].
([1] * [2]).search - Поиск в строке [1] по регулярному выражению [2].
([1] * [2]).match - Возвращает все подстроки строки [1] соответствующие регулярному выражению [2]. 
					(пример использования в Tokenizer)
([1] * [2]).replace - Замена в строке [1] по регулярному выражению [2].
([1] * [2]).getToken - Выделение с начала строки [1] лексемы соответствующей регулярному выражению [2]. 
						Возвращает выделенную лексему и идущую после неё часть строки. 
						Или "undefined", если начало строки [1] не соответствует шаблону [2]. 
						(пример использования в Parser и JSON)
([1]).length - Возвращает длину строки [1].

// Ввод / вывод.

print - Выводит в консоль элемент или кортеж элементов.
printType - Выводит в консоль тип элемента или кортеж типов элементов кортежа.
([1]).readFile - Считавает файл по пути [1] в строку и возвращает её. В случае неудачи возвращает undefined.
([1] * [2]).createFile - Создать или очистить файл по пути [2] и записать в него значение [1]. Снимает атрибут "только чтение". В случае успеха возвращает true, иначе false.
([1] * [2]).appendFile - Записать значение [1] в конец файла по пути [2]. Снимает атрибут "только чтение". В случае успеха возвращает true, иначе false.

// Работа с массивами.
// Массивы индексируются с нуля.

([1] * [2]).arrayCreate - Возвращает массив из [1] элементов, заполненный значениями [2].
([1] * [2]).arrayGet - Получить из массива [1] элемент с индексом [2].
([1] * [2] * [3]).arraySet - В массиве [1] присвоить элементу с индексом [2] значение [3]. 
								Возвращает изменённый массив [1].
([1]).arrayLen - Возвращает длину массива [1].
([1] * ... * [n]).arrayCat - Возвращает объединение массивов [1]-[n].
([1]).arrayCopy - Возвращает объединение массивов [1]-[n].
([1] * [2]).arrayFromFile - Попытаться заполнить массив [1] значениями из файла по пути [2], если не вышло, вернёт undefined.