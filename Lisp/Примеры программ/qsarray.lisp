(ql:quickload :lparallel)
(defpackage :qs (:use :cl :lparallel))
(in-package :qs)

(defun random-array-filling (arr n)
  (dotimes (i n)
    (setf (aref arr i) (random 1000)))
  arr)

(defun random-array (n)
  (random-array-filling (make-array n :initial-element nil) n))

(defun swap (arr i j)
  (let ((buf (aref arr j)))
    (setf (aref arr j) (aref arr i))
	(setf (aref arr i) buf)))

(defun quicksort (arr lo hi)
  (if (< lo hi)
    (let ((l lo) 
	      (h hi) 
		  (pivot (aref arr hi)))
	  (loop
	    (loop
		  (if (or (>= l h) (> (aref arr l) pivot)) (return))
		  (incf l))
		(loop
		  (if (or (<= h l) (< (aref arr h) pivot)) (return))
		  (decf h))
		(if (< l h) (swap arr l h))
		(if (>= l h) (return)))
	  (setf (aref arr hi) (aref arr l))
	  (setf (aref arr l) pivot)
	  (quicksort arr lo (- l 1))
	  (quicksort arr (+ l 1) hi))
	arr))
	
(defpun pquicksort (arr lo hi p)
  (if (= p 1)
    (quicksort arr lo hi)
    (if (< lo hi)
      (let ((l lo) 
	        (h hi) 
		    (pivot (aref arr hi))
			(pgreater (floor (/ p 2)))
			(pless (ceiling (/ p 2))))
	    (loop
	      (loop
	  	    (if (or (>= l h) (> (aref arr l) pivot)) (return))
		    (incf l))
		  (loop
		    (if (or (<= h l) (< (aref arr h) pivot)) (return))
		    (decf h))
		  (if (< l h) (swap arr l h))
		  (if (>= l h) (return)))
	    (setf (aref arr hi) (aref arr l))
	    (setf (aref arr l) pivot)
		(plet ((arr1 (pquicksort arr lo (- l 1) pless)) (arr2 (pquicksort arr (+ l 1) hi pgreater))) arr2)
	  arr))))

(defun quicksort-start (arr n p)
  (pquicksort arr 0 (- n 1) p))
  
(defun pow (x n)
  (cond ((= n 0) 1)
        (t (* x (pow x (- n 1))))))
  
(defun run-tests ()
  (with-open-file (ot "stat2.txt" :direction :output :if-exists :supersede)	
    (dotimes (i1 4 t) 
      (let ((thread (pow 2 i1)))
	    (setf lparallel:*kernel* (lparallel:make-kernel thread))
	    (prin1 (concatenate 'string "Число потоков: " (write-to-string thread)) ot)
	    (dotimes (i2 6 t) 
	      (let ((zern (pow 2 i2)) (tm 0.0))
;	        (print (concatenate 'string "Зернистость: " (write-to-string zern)) ot)
		    (dotimes (i3 10 t) 
		      (let ((start (/ (get-internal-real-time) 1000)))
                (quicksort-start (random-array 1000000) 1000000 zern)
			    (setq tm (+ tm (- (/ (get-internal-real-time) 1000) start)))))
		    (setq tm (/ tm 10))
		    (print tm ot)))
	    (terpri ot)))
    (terpri ot)))
